#DAY 1  
What is Flexbox?

There are two important components to a flexbox layout: flex containers and flex items.
 A flex container is an element on a page that contains flex items. 
 All direct child elements of a flex container are flex items. 
 This distinction is important because some of the properties you will learn in this
  lesson apply to flex containers while others apply to flex items.

There are two important components to a flexbox layout: flex containers and flex items.

To designate an element as a flex container, set the element’s 
Preview: Docs Specifies the display behavior of an elements rendering box.
display
 property to flex or inline-flex. Once an item is a flex container, there are several properties we can use to specify how its children behave. In this lesson we will cover these properties:

-justify-content
-align-items
-flex-grow
-flex-shrink
-flex-basis
-flex
-flex-wrap
-align-content
-flex-direction
-flex-flow

--
 display: flex;
 display : inline-flex;


---flex-item
Below are five commonly used values for the align-items property:

flex-start — all elements will be positioned at the top of the parent container.
flex-end — all elements will be positioned at the bottom of the parent container.
center — the center of all elements will be positioned halfway between the top and bottom of the parent container.
baseline — the bottom of the content of all items will be aligned with each other.
stretch — if possible, the items will stretch from top to bottom of the container 
(this is the default value; elements with a specified height will not stretch; 
elements with a minimum height or no height specified will stretch).
#day 3
Like the shorthand flex property, the shorthand 
flex-flow property is used to declare both the 
flex-wrap and flex-direction
 properties in one

 -- flex-flow: column wrap; ! ! !
#day 2 GRID 
In this lesson, we introduce a powerful tool called CSS Grid.
 The grid can be used to layout entire web pages.
  Whereas Flexbox is mostly useful for positioning items in a one-dimensional layout,
   CSS grid is most useful for two-dimensional layouts, 
   providing many tools for aligning and moving elements across both rows and columns.

- By the end of this lesson, you will understand how to use these properties to create grid layouts:

    grid-template-columns
    grid-template-rows
    grid-template
    grid-template-area
    row-gap / column-gap / gap
    grid-row-start
    grid-row-end
    grid-column-start
    grid-column-end
    grid-area

    base-of-me - and size sa row depent sa with nga ge declare ! ! !
 
   - grid-template-columns: 100px 50% 200px;
   - grid-template-rows: 40% 50% 50px;
      - grid-template: 200px 300px / 20% 10% 70%;
     - shorthand -> grid-template: [rows] / [columns];

Grid Essentials
Fraction
You may already be familiar with several types of responsive units
 such as percentages (%), ems and rems. CSS Grid introduced a new relative

 fr (Fractional Unit)
 sizing unit — fr, like fraction.
 1fr is 100px 

 rem (Root Em)
 1rem = 18px 

 em (Element Relative Unit)

Comparison Table:
Unit	Relative To	Common Use Case
fr	Fraction of free space in a grid	Grid layouts
rem	Root element's font size	Consistent typography sizing
em	Parent element's font size	Relative scaling for nested components

 repeat -  grid-template: repeat(3, 1fr) / 3fr 50% 1fr;
    grid-template: row -repeat(3, 1fr) / column - repeat(4, 1fr) ;


 Grid Gap - gap: 20px 10px; 
 syntax = gap: rows - 20px columns - 10px;
 row-gap : 20px;
 column-gap : 20px;

Grid Items
Multiple Row Items

Grid Essentials
Grid Area - >   grid-area: rs - 2 / cs - 3 / re - 4 / ce - span 5; 
meaning is - > 
grid-row-start
grid-column-start
grid-row-end
grid-column-end
---------------
#day to continue ! ! !
Grid Template Areas
 grid-template-areas: "header header"
                       "nav nav" 
                       "info services"
                       "footer footer";
Advanced CSS Grid
Grid Template Areas
The grid-template-areas property allows you to name sections of your web page to use as values in the 
grid-row-start, 
grid-row-end, 
grid-column-start,
grid-column-end, and 
grid-area properties. This property is declared on grid containers.

