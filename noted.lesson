GitHub - Create Repo and Remote new repo for new Files in Rocal to store in GitHub

-git init 
-git branch -M  = change to main branch ! ! ! 
-git add .
-git commit -m "first-commit"
-git remote add origin https://github.com/JAViERCANOY05/Learning---CSS-.git
-git push -u origin main
- if encounter ERROR fatal to push change credentials account to your github account ! ! ! 


CSS : 

internal styles  / stylesheets
inline styles 
external stylesheet
element is  - p , h2 , div 

------------------------------

IDs are the most specific selector in CSS, followed by classes, and finally, type. For example, consider the following HTML and CSS:

- Select Miltuple Selector to aplly CSS : 
Multiple Selectors
- Chaining and Specificity : .main p {
  color: red;
}
-------------
Selectors
Review

Throughout this lesson, you learned how to select HTML elements with CSS and apply styles to them. Let’s review what you learned:

1. CSS can select HTML elements by type, class, ID, and attribute.
2. All elements can be selected using the universal selector.
3. An element can have different states using the pseudo-class selector.
4. Multiple CSS classes can be applied to one HTML element.
5. Classes can be reusable, while IDs can only be used once.
6. IDs are more specific than classes, and classes are more specific than type. 
That means IDs will override any styles from a class, 
and classes will override any styles from a type selector.

Multiple 
-- Preview: Docs Loading link descriptionselectors
 can be chained together to select an element. 
 This raises the specificity but can be necessary.
Nested elements can be selected by separating selectors with a space.
Multiple unrelated selectors can receive the same styles by separating the selector names with commas.
Great work this lesson. 
With this knowledge, you’ll be able to use CSS to change the look and feel of websites to make them look great!

#day 3 
Margin Collapse

As you have seen, 
Preview content is loading
paddingis space added inside an element’s 
Preview: Docs Loading link descriptionborder, while Preview content is loading
marginis space added outside an element’s border. One additional difference is that top and bottom 
Preview: Docs Loading link descriptionmargins
, also called vertical margins, collapse, while top and bottom padding does not.

#day 4 
Make some adjustments to the code in the code editor. 
See if you can improve the appearance of the page by changing the following properties:

width
height
padding
border
margin
overflow
#day 5 
In this lesson, you will learn five properties for adjusting the position of HTML elements in the browser:

position :
          1.absolute - bahaviour niya is siya mag boot sa iyang gusto
          2.relative : normal flow ra ang behaviour 
          then murag di siya maka hawa sa content parent 
          3.fixed : magamit sa header or footer ,
          mo fixed siya , tas maka boot ka asa ibutang
           top bot r and l maka scroll ka nga then ang ge 
           fixed nimo mo stay kung asa nimo siya eh display
          4.sticky : is kung ma sticky ka top-10 pag scroll nimo if mo
          abot nakas top-10 mo sticky siya diha hantud sa imong scroll mo uban
          5.static - sa the default value ! ! ! 
display
z-index
float

//ag z-index : -1 ; diay kay ang iyang
 bahaviour is mo move forward ang item or a content 
 #day 6
 What Makes an Element "Positioned"?
An element becomes positioned when its position property is 
set to anything other than static (the default). Once positioned,
 you can use the offset properties (top, right, bottom, left) to control where it appears.

 - >  Why Use Positioned Elements?
      To create layouts (e.g., sidebars, headers).
      To create floating elements (e.g., buttons, modals).
      To control overlap and z-index (stacking order).
Types of Positioning

 1. Static (default):
                    Every element is positioned normally in the document flow.
                    No special positioning is applied.
                    Example:
                    css
                    Copy code
                    element {
                      position: static; /* Default value */
                    }
2. Relative:
                    The element is positioned relative to its original position in the document.
                    It stays in the flow of the document but can be shifted using top, right, bottom, or left.
      2nd Oponion - > It means the element is first laid out in its default position within the normal 
                    document flow, as if it had no positioning applied.
                    Example:
                    css
                    Copy code
                    element {
                      position: relative;
                      top: 10px; /* Moves down 10px from its original position */
                    }
3. Absolute:
                    The element is removed from the document flow and positioned
                     relative to its nearest positioned ancestor 
                     (an ancestor with position: relative, absolute, or fixed).
                    If no positioned ancestor exists, it positions itself relative to the <html> (root) element.
                    - ikaw maka boot asa ibutang tas dili siya apil 
                    Example:
                    css
                    Copy code
                    element {
                      position: absolute;
                      top: 20px; /* 20px from the top of the nearest positioned ancestor */
                    }
4. Fixed:
                    The element is removed from the document flow and positioned 
                    relative to the viewport (the visible part of the browser).
                    It doesn’t move when scrolling.
      2nd Oponion - > di sya mo sabay sa scroll mo stay lang siya kung asa siya ge position ! ! ! 
                    Example:
                    css
                    Copy code
                    element {
                      position: fixed;
                      bottom: 0;
                      right: 0; /* Fixed to the bottom-right corner of the screen */
                    }
5. Sticky:
                      A hybrid of relative and fixed.
                      The element behaves like relative until you scroll to a specific
                       point, after which it "sticks" like fixed within its container.
     2nd Oponion - > ma apil siya sa scroll until ma abot siya kung asa siya ge position ! ! !
                      Example:
                      css
                      Copy code
                      element {
                        position: sticky;
                        top: 10px; /* Starts sticking 10px from the top of its container */
                      }
-- NOTED --  
Since static and relative positioned elements stay in the normal flow of the document,
 when a user scrolls the page (or parent element) these elements will scroll too.
 And since fixed and absolute positioned elements are removed from the document flow,
 when a user scrolls, these elements will stay at their specified offset position.

 The sticky value is another position value that keeps an element in the document flow as the user scrolls,
  but sticks to a specified position as the page is scrolled further. 
  This is done by using the sticky value along with the familiar offset properties,
   as well as one new one.
   #day7 

   -Inline Display

   Every HTML element has a default display value that dictates
    if it can share horizontal space with other elements. 
    Some elements fill the entire browser from left to right
     regardless of the size of their content. Other elements 
     only take up as much horizontal space as their content 
     requires and can be directly next to other elements.

In this lesson, we’ll cover three values for the display property: 
inline, block, and inline-block.

Visual Comparison
Imagine you have three boxes with each display property:

Inline: They sit side by side, no matter the content size.
Block: Each box takes up the whole width on a new line.
Inline-block: They align side by side but respect width and height. -> combination na siya sa inline block ug block bahaviour ! ! ! 

Display and Positioning
Float               
-Imagine you're playing with toys on a table. The table is your webpage, and the toys are parts of your webpage like images or boxes.

Now, the float is like telling a toy to move to one side of the table. You can say:

"Go to the left side of the table" (float: left).
"Go to the right side of the table" (float: right).
Other toys (or boxes) will then try to fit around it,
 like kids gathering around the toy to play.

 
Clear:
The clear property is like saying, "Hey, 
all the floating toys, stop right here, and don't let anything wrap around you."
 It's like creating a clean space where no other toys can float beside it.
 -> ang clear kay if mag gubot na ba kay nag gamit ug float , pwedy ra eh clear para 
 maiwasan ang mag ka gubot sa mga conent ! ! !

 #day 7 continue ! ! !
 Introduction to Color

 Foreground vs Background
Before discussing the specifics of color,
 it’s important to make two distinctions about color. Color can affect the following design aspects:

Name ,Hex and RGB
Color
Hue, Saturation, and Lightness
Hexadecimal or hex colors : #23F41A
RGB : rgb(7, 210, 50)
HSL : hsl(200, 20%, 50%)

You can add Preview: Docs Loading link description
opacity to color in RGB and HSL by adding a fourth value, 
a, which is represented as a percentage.

* Typography
Serif and Sans-Serif
You may be wondering what features make a font similar to another font.
 The fonts Caslon, Georgia, and Times New Roman are Serif fonts.
  Serif fonts have extra details on the ends of each letter,
   as opposed to Sans-Serif fonts, which do not have the extra details.

h1 {
  font-family: Caslon, Georgia, 'Times New Roman', serif;
}  this ? 

ChatGPT said:
ChatGPT
Let's explain this the same way—like choosing crayons for your title, but now there's an extra crayon in the box!

In this case:

Caslon, Georgia, and 'Times New Roman' are still your first, second, and third favorite crayons.
serif is like saying: "If none of my favorite crayons are available,
 just use any crayon with little feet at the ends of the letters."
Those little feet are called serifs in fonts. So if the browser can't find Caslon, Georgia,
 or 'Times New Roman', it will pick a general serif font, like a backup crayon.

Why Add serif?
It ensures that even if the browser doesn’t have the specific fonts,
 it will still use a font with a similar style—one that has serifs (the little feet)
  instead of something plain like Arial.

So it's like saying:

Use Caslon if you have it.
If not, use Georgia.
If not, use 'Times New Roman'.
If none of those are available, just pick any serif font.

Font Weight